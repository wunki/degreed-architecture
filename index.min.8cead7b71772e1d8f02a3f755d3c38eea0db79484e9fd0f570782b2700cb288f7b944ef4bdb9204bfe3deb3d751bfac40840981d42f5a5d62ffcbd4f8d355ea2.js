var suggestions=document.getElementById('suggestions');var userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(e){if(e.keyCode===191){e.preventDefault();userinput.focus();}
if(e.keyCode===27){userinput.blur();suggestions.classList.add('d-none');}}
document.addEventListener('click',function(event){var isClickInsideElement=suggestions.contains(event.target);if(!isClickInsideElement){suggestions.classList.add('d-none');}});document.addEventListener('keydown',suggestionFocus);function suggestionFocus(e){const focusableSuggestions=suggestions.querySelectorAll('a');const focusable=[...focusableSuggestions];const index=focusable.indexOf(document.activeElement);let nextIndex=0;if(e.keyCode===38){e.preventDefault();nextIndex=index>0?index-1:0;focusableSuggestions[nextIndex].focus();}
else if(e.keyCode===40){e.preventDefault();nextIndex=index+1<focusable.length?index+1:index;focusableSuggestions[nextIndex].focus();}}
(function(){var index=new FlexSearch({preset:'score',cache:true,doc:{id:'id',field:['title','description','content',],store:['href','title','description',],},});var docs=[{id:0,href:"https://degreed.github.io/architecture/docs/prologue/introduction/",title:"Introduction",description:"Read everything you need to know about the Degreed architecture, from Domain APIs, through Event-Driven Architecture, we got you covered.",content:"\u003cp\u003eTo continue our growth, we need an eco-system which supports that. We are building that new eco-system and want you to be successful in it.\u003c/p\u003e\n\u003cp\u003eThis site will tell you everything you need to know about our new architecture and the \u003ca href=\"https://degreed.github.io/architecture/docs/principles/introduction/\" title=\"Architecture Principles\"\u003eArchitecture Principles\u003c/a\u003e which lie at its foundation.\u003c/p\u003e\n\u003cp\u003eWhen Degreed started, life was relatively simple. There weren\u0026rsquo;t a lot of features to maintain, clients to please or fellow developers to collaborate with. Meaning our software was simple, the data models well understood and the feedback loop fast.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eYou know how to make changes to the system and was confident in what the impact of those changes was.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eAs we grew, we added more complexity to all layers of our software. Not only did we add a lot of parts, those parts started moving more quickly when we grew to fourteen product teams.\u003c/p\u003e\n\u003cp\u003eWe want to maintain our ability to make changes with confidence, while also growing our team. To do so, we need to have an architecture which enables us to do so. This document is our plan to increase developer productivity, autonomy and our ability to scale.\u003c/p\u003e\n\u003ch2 id=\"developer-productivity\"\u003eDeveloper Productivity\u003c/h2\u003e\n\u003cp\u003eOur goal is to increase developer productivity by \u003cem\u003ereducing the complexity\u003c/em\u003e and \u003cem\u003eincrease the feedback loop\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWe want to reduce your cognitive load when solving a problem. Maybe the better description would be that we are pushing or moving the complexity away from the every-day developer experience.\u003c/p\u003e\n\u003cp\u003eWhat that means is that we are looking at ways where we can apply a multiplier. Push the complexity to a part of our system where we can solve it once for all teams beneath it.\u003c/p\u003e\n\u003cp\u003eA well known example is micro-services where you are not reducing the complexity, you choose to move a lot of complexity to the infrastructure so that developers have a reduced amount of complexity in their day-to-day work.\u003c/p\u003e\n\u003cp\u003eReducing complexity is creating a system where the cognitive burden is low because we moved the complexity not inherent to your problem solving to other parts of our system.\u003c/p\u003e\n\u003ch2 id=\"autonomy\"\u003eAutonomy\u003c/h2\u003e\n\u003cp\u003eAutonomy is being able to build a solution with the tools optimal to your problem. We gain this independence by unbundling our data layer and detangling our application.\u003c/p\u003e\n\u003ch2 id=\"scalability\"\u003eScalability\u003c/h2\u003e\n\u003cp\u003eThe only way to scale a large software organization is to keep expanding horizontally. Independent product teams who are empowered to optimize for their own goals.\u003c/p\u003e\n\u003cp\u003eWe also need scalability around our software infrastructure. This is where we also apply horizontal scaling again with a service oriented architecture (System of Systems).\u003c/p\u003e\n\u003ch2 id=\"get-involved\"\u003eGet involved\u003c/h2\u003e\n\u003cp\u003eWhat you are reading is a living document. It may not breath, but it does evolve.\u003c/p\u003e\n\u003cp\u003eWe need your help and input. You can always ask questions or start\ndiscussions in our\n\u003ca href=\"https://degreed.slack.com/archives/C01LZ1XNH1Q\"\u003e#architecture-townhall\u003c/a\u003e\nchannel on Slack.\u003c/p\u003e\n\u003cp\u003eYou can also help us write this document. There is a \u0026ldquo;Edit this page on Github\u0026rdquo; button on every page which enables you to open up pull requests. You can also add issues to the Github repository if something is missing, unclear or wrong.\u003c/p\u003e\n"},{id:1,href:"https://degreed.github.io/architecture/docs/prologue/unbundling-the-database/",title:"Unbundling the Database",description:"",content:"\u003ch2 id=\"scalability\"\u003eScalability\u003c/h2\u003e\n\u003cp\u003eWe will continue to experience tremendous growth as a business and our data store needs to accommodate this. Growing your data store means that you are breaking it into smaller, horizontal pieces. Pieces which you are then able to grow vertically.\u003c/p\u003e\n\u003cp\u003eWe have chosen to divide our data layer around the areas of our business. In Domain Driven Design it\u0026rsquo;s often referred to as a \u0026ldquo;Bounded Context\u0026rdquo;. This will not only give us more scaling options, but also enable us to optimize our data store, specific to the needs of that context.\u003c/p\u003e\n\u003ch2 id=\"stability\"\u003eStability\u003c/h2\u003e\n\u003cp\u003eI think we agree that our data is at the foundation of our application. This is where the \u003cem\u003eStable Dependencies Principle\u003c/em\u003e comes into play:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDesign your software in such a way that any given component depends on other components that are more stable than it is.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eHow are you able to address changing requirements in your most stable part of your dependency chain?\u003c/p\u003e\n\u003cp\u003eAs always in software engineering, the answer is abstractions. You abstract away the data layer by supplying an interface, a contract. As a user you don\u0026rsquo;t have to deal with implementation details or changing internals, you can depend on a stable contract.\u003c/p\u003e\n\u003cp\u003eWe will introduce an uniform contract for getting data in and out of the system. Ours is a REST API, where we communicate in JSON\u0026rsquo;s, something we are all familiar with. This is what we call \u003ca href=\"https://degreed.github.io/architecture/docs/domain/introduction/\"\u003eDomain APIs\u003c/a\u003e and we will dive deeper into the details later on.\u003c/p\u003e\n"},{id:2,href:"https://degreed.github.io/architecture/docs/prologue/detangling-the-monolith/",title:"Detangling the Monolith",description:"",content:"\u003cp\u003eBy implementing application services, we will reduce the cognitive load required to make changes. We also increase autonomy, the ability to aply the optimal solution to your problem, not being hindered by dependencies outside of your domain.\u003c/p\u003e\n\u003ch2 id=\"what-do-they-contain\"\u003eWhat do they contain?\u003c/h2\u003e\n\u003cp\u003eApplication services are units of business logic which act on changes within the business. That\u0026rsquo;s all they contain, business logic. The application services sit on top of our Domain API\u0026rsquo;s and preferably have a one-to-one relation with them.\u003c/p\u003e\n\u003cp\u003eWe have a whole \u003ca href=\"https://degreed.github.io/architecture/docs/domain/introduction/\"\u003eDomain APIs\u003c/a\u003e chapter dedicated to them, where you can read how they communicate and fit within the whole eco-system.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn the prologue we wanted to introduce you to the two architecture initiatives: \u003cem\u003e\u0026ldquo;Unbundling the database\u0026rdquo;\u003c/em\u003e and \u003cem\u003e\u0026ldquo;Detangling the Monolith\u0026rdquo;\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWe will accomplish these things with \u003cem\u003e\u0026ldquo;Domain APIs\u0026rdquo;\u003c/em\u003e and \u003cem\u003e\u0026ldquo;Application Services\u0026rdquo;\u003c/em\u003e on top of \u003cem\u003e\u0026ldquo;Event-Driven Architecture\u0026rdquo;\u003c/em\u003e. That\u0026rsquo;s a whole lot of lingo, which I promise you will make sense once we dive into them later on.\u003c/p\u003e\n\u003cp\u003eBefore we go there, let\u0026rsquo;s first dive into the underlying principles which have guided us in building these plans and which will help guide you in your day-to-day decision making.\u003c/p\u003e\n"},{id:3,href:"https://degreed.github.io/architecture/docs/principles/introduction/",title:"Architecture Principles Introduction",description:"",content:"\u003cp\u003eDegreed is moving from a single application, to a system of systems. We want every system – aka service – to thrive in our eco-system. The “Architecture Principles” are guidelines to help you achieve that goal.\u003c/p\u003e\n\u003cp\u003eThe principles are not written in stone, they change and adapt along with the needs of the business. Every principle consists of the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eA \u003cstrong\u003edeclarative statement\u003c/strong\u003e, for example: \u0026ldquo;smart nodes, dumb pipes: systems should be decoupled as much as possible and not centrally choreographed”.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eA \u003cstrong\u003erationale\u003c/strong\u003e that describes the qualities of the system we want to achieve, for example: \u003cem\u003e\u0026ldquo;To allow systems to evolve over time and keep up with the business rate of change, having them own their own communication allows them to change quickly rather than negotiating a change”\u003c/em\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eImplications\u003c/strong\u003e which give us concrete examples what this would mean within our own eco-sytem.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTry to understand all of the principles and what they mean. They will help you to understand the rationale behind our architecture and make it easy to operate within it.\u003c/p\u003e\n"},{id:4,href:"https://degreed.github.io/architecture/docs/principles/system-of-systems/",title:"System of Systems",description:"",content:"\u003cp\u003eMonolithic applications can be successful, but it has become common for organisations to feel frustrations with them as they grow in complexity and scope over time.\u003c/p\u003e\n\u003cp\u003eChange cycles are tied together – a change made to a small part of the application requires the entire monolith to be rebuilt, retested and deployed. Over time it is often hard to keep a good modular structure, making it challenging to keep changes that ought to affect only one module contained within that module. Scaling requires scaling of the entire application rather than parts of it that require greater resources. Scaling requires uplift of the entire application rather than only the parts that require greater resources.\u003c/p\u003e\n\u003cp\u003eBuilding software that is small and simple also makes systems easier to reason about, and easier to test independently. Things that are easier to reason about, with less code, tend to generate fewer bugs and reduce the likelihood of complex issues in Production.\u003c/p\u003e\n\u003ch2 id=\"implications\"\u003eImplications\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eAim to decompose your system into a suite of smaller systems, each of which focus on doing a small number of things well.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBuild systems around business capabilities that change independently to others, rather than individual features or technologies.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBeware the risks of creating a distributed monolith.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eServices are independently deployable and independently testable.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eReduce the burden of managing several smaller systems through automation.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn distributed systems, it is important to design for failure.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePublish interfaces.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:5,href:"https://degreed.github.io/architecture/docs/principles/evolution/",title:"Evolutionary Architecture",description:"",content:"\u003cp\u003eAt this point in time we know less than we’ll know in six months. Our software should be able to evolve as we learn more about the business domain, the operational environment, and the technology itself. Change is a constant in the world around us, and its impact is increasingly unpredictable. However, by engineering our software for evolvability as a primary concern, we give ourselves the best chance of experimenting, learning and thriving in new conditions.\u003c/p\u003e\n\u003ch2 id=\"implications\"\u003eImplications\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eWhilst we cannot and should not design for every possible eventuality, the evolvability of our systems can be hugely improved, at low cost, if the likely triggers and impacts of change are considered early enough. Uncertainties, “what-if” business \u0026amp; technology changes and failure modes should be made explicit, rehearsed and mitigated where the cost to do so is low relative to the risk. Use Small and Simple and Model the Business Domain to group together functionality in ways that minimise the splash-zone of potential change.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWhen making design decisions, give yourself the best chance of adapting to new information by waiting till the last responsible moment, and preferring choices that are easily reversible or that keep your options open.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDefine and regularly measure the architectural qualities that are most important to success, and which must be nurtured as the system evolves.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSystems and processes will need to be exposed through clearly defined interface contracts so that the underlying implementation can change and evolve without impacting the wider system. \u003cem\u003eNote: this does not mean that a component or system\u0026rsquo;s internal interfaces need to be approached in the same way.\u003c/em\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eComponents must be accessible through open, non-proprietary standards (with a preference for HTTP \u0026amp; in particular REST). Embracing the best practices of the web maximises the opportunity for evolution while minimising the risk of technical redundancy.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eStandards that are derived from working software and not just working groups are preferred. Battle-tested standards used by several organisations tend to be more adaptable than over-engineered hot air. Most successful standards tend to be the ones that are adopted by Open Source communities.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAdopt patterns such as \u003ca href=\"https://martinfowler.com/bliki/TolerantReader.html\"\u003eTolerant Reader\u003c/a\u003e and the \u003ca href=\"https://en.wikipedia.org/wiki/Robustness_principle\"\u003ePrinciple of Robustness\u003c/a\u003e to enable systems to release changes independently without requiring \u003ca href=\"https://www.martinfowler.com/bliki/ParallelChange.html\"\u003eparallel change\u003c/a\u003e versioning and migration.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSometimes incremental change is insufficient as requirements change, so consider \u003ca href=\"https://martinfowler.com/bliki/SacrificialArchitecture.html\"\u003eSacrificial Architecture\u003c/a\u003e as a pattern. Don\u0026rsquo;t be afraid to throw away and re-write, as this is often faster and will lead to better quality.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:6,href:"https://degreed.github.io/architecture/docs/principles/database-as-a-service/",title:"Database as a Service",description:"",content:"\u003cp\u003eThis principle only applies to the new development of our Domain APIs, which will use the \u003ca href=\"https://www.jsonapi.net\"\u003eJSON:API framework\u003c/a\u003e. Below you can find our reasoning behind the decision and what the implications are.\u003c/p\u003e\n\u003ch2 id=\"change-management\"\u003eChange Management\u003c/h2\u003e\n\u003cp\u003eStored Procedures should be treated to the same standards as the rest of our application. It needs to be part of our Continuous Integration pipeline, where automated tests run against it. It has proven difficult to apply versioning and automated tests for them. This makes it hard for us to reach the quality of Continuous deployment and zero downtime that we desire.\u003c/p\u003e\n\u003ch2 id=\"database-as-a-service\"\u003eDatabase as a service\u003c/h2\u003e\n\u003cp\u003eWe are moving towards a Database as a Service model where each Domain API will access its own persistent storage, completely independent of other Domain APIs.\u003c/p\u003e\n\u003cp\u003eThis means that we can use persistence which is optimal to the domain. Using Stored Procedures binds us to a specific technology. Using Entity Framework means you could with relative low effort switch between SQL Server, PostgreSQL and Cosmos DB.\u003c/p\u003e\n\u003ch2 id=\"monolithic-database\"\u003eMonolithic Database\u003c/h2\u003e\n\u003cp\u003eStored Procedures are often applied when different domains and teams re-use the same data layer. They allowed us to create an abstraction at the lowest level and making sure that it’s reflected across the business.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"https://degreed.github.io/architecture/docs/domain/introduction/\"\u003eDomain APIs\u003c/a\u003e will be the lowest level access you can get to data, meaning that we can now move that logic into the application layer.\u003c/p\u003e\n\u003ch2 id=\"tooling\"\u003eTooling\u003c/h2\u003e\n\u003cp\u003eDeveloper tooling has made leaps and bounds in the past years. From programming language advancements, to tools which help you during development (editors, source control, linters).\u003c/p\u003e\n\u003cp\u003eOne of these tools in our toolbox as Degreed developers is the \u003ca href=\"https://www.jsonapi.net\"\u003eJSON:API framework\u003c/a\u003e, which enables us to easily release a best-in-class REST API for access to our data.\u003c/p\u003e\n\u003cp\u003eThe JSON:API framework depends heavily on \u003ca href=\"https://docs.microsoft.com/en-us/ef/core/\"\u003eEntity Framework Core\u003c/a\u003e (EF Core) to generate dynamic SQL statements. Continuing to make use of Stored Procedures would negate a lot of its capabilities.\u003c/p\u003e\n\u003ch2 id=\"implications\"\u003eImplications\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eConsider the use of Stored Procedures as premature optimization. Only use Stored Procedures for the most critical performance situations and when the application layer has failed to satisfy a particular requirement.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDon\u0026rsquo;t use Stored Procedures for business logic, all business logic should be in the \u003ca href=\"https://degreed.github.io/architecture/docs/applications/introduction/\" title=\"Application Services\"\u003eApplication Services\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNo more use of Stored Procedures for access management or validation of inputs. This should all reside in the application, before being sent to the persistence layer.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you require to use Stored Procedures for reads, always start with views as they are much easier to use and they integrate better with EF Core, a core component of our JSON:API framework.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"related-resources\"\u003eRelated Resources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.thereformedprogrammer.net/five-levels-of-performance-tuning-for-an-ef-core-query/\"\u003eFive levels of performance tuning for an EF Core query\u003c/a\u003e. Blog post on how to do performance improvements for Entity Framework Core.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.manning.com/books/entity-framework-core-in-action\"\u003eEntity Framework Core in Action\u003c/a\u003e. Best book en EF Core.\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:7,href:"https://degreed.github.io/architecture/docs/principles/smart-nodes-dumb-pipes/",title:"Smart Nodes Dumb Pipes",description:"",content:"\u003cp\u003eComposing larger systems around simpler and smaller systems also means needing to own their communication with other systems as well. To allow systems to evolve over time and keep up with the business’s desired pace of change, having them own their communication allows them to change quickly rather than negotiating a change to the pipes that connect them.\u003c/p\u003e\n\u003ch2 id=\"implications\"\u003eImplications\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ePrefer open protocols, such as HTTP.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eServices act like unix-filters, accepting requests, applying logic and returning a response.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eImplement integration adapters to isolate the technicalities of integration, and anti-corruption layers to isolate the translation of business data, between bounded contexts.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWhen data needs to be exposed or exported outside the service boundary, wrap this communication in a service layer rather than allowing consumers to access the data directly. This helps prevent business logic leaking out of the system.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:8,href:"https://degreed.github.io/architecture/docs/principles/tools-of-the-trade/",title:"Tools of the Trade",description:"",content:"\u003cblockquote\u003e\n\u003cp\u003eWe must never become too busy sawing to take time to sharpen the saw.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003eSpend your time and use your FlexEd to improve yourself as a human and a developer.\u003c/li\u003e\n\u003cli\u003eReach out to your manager if there are tools you need to be more effective as a developer.\u003c/li\u003e\n\u003cli\u003eIdentify small annoyances in our development process. Thanks to the power of scale, reducing our build time by 10 seconds will add up to hours of time saved per week.\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:9,href:"https://degreed.github.io/architecture/docs/principles/the-degreed-platform/",title:"The Degreed Platform",description:"Systems should be build as a platforms for internal and external use.",content:"\u003cp\u003eDegreed is transitioning from a Software as a Service (Saas) to a Software as a Platform (SaaP) model for our business partners. As a company we want to deliver products to our (internal and external) customers which can be consumed by their own services.\u003c/p\u003e\n\u003ch2 id=\"implications\"\u003eImplications\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ePlatform products provide their functionality via (public) APIs; hence, the design of our APIs should be based on the API as a Product principle.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTreat your API as product and act like a product owner.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePut yourself into the place of your customers; be an advocate for their needs.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eEmphasize simplicity, comprehensibility, and usability of APIs to make them irresistible for client engineers.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eActively improve and maintain API consistency over the long term.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMake use of customer feedback and provide service level support.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:10,href:"https://degreed.github.io/architecture/docs/domain/introduction/",title:"Domain APIs Introduction",description:"",content:""},{id:11,href:"https://degreed.github.io/architecture/docs/domain/domains/",title:"The Domain in Domain APIs",description:"",content:""},{id:12,href:"https://degreed.github.io/architecture/docs/domain/migrations/",title:"Migrations",description:"",content:""},{id:13,href:"https://degreed.github.io/architecture/docs/domain/locality/",title:"Locality",description:"",content:""},{id:14,href:"https://degreed.github.io/architecture/docs/domain/infrastructure/",title:"Infrastructure",description:"",content:"\u003cp\u003eWe want our teams to be able to own the data layer of the domains they are working in. This has a few implications for the roles as we have traditionally defined them.\u003c/p\u003e\n"},{id:15,href:"https://degreed.github.io/architecture/docs/applications/introduction/",title:"Application Services Introduction",description:"",content:""},{id:16,href:"https://degreed.github.io/architecture/docs/applications/communication/",title:"Communication",description:"",content:""},{id:17,href:"https://degreed.github.io/architecture/docs/events/introduction/",title:"Event-Driven Architecture Introduction",description:"",content:"\u003ch2 id=\"data-on-the-inside-or-outside\"\u003eData on the inside or outside?\u003c/h2\u003e\n"},{id:18,href:"https://degreed.github.io/architecture/docs/events/state-events/",title:"State Events",description:"",content:""},{id:19,href:"https://degreed.github.io/architecture/docs/events/application-events/",title:"Application Events",description:"",content:""},{id:20,href:"https://degreed.github.io/architecture/docs/events/event-store/",title:"Event Store",description:"",content:""},{id:21,href:"https://degreed.github.io/architecture/docs/legacy/introduction/",title:"Legacy Introduction",description:"",content:""},{id:22,href:"https://degreed.github.io/architecture/docs/legacy/applications/",title:"Applications",description:"",content:""},{id:23,href:"https://degreed.github.io/architecture/docs/legacy/data/",title:"Data",description:"",content:""},{id:24,href:"https://degreed.github.io/architecture/docs/legacy/messaging/",title:"Messaging",description:"",content:""},{id:25,href:"https://degreed.github.io/architecture/docs/legacy/services/",title:"Services",description:"",content:""},{id:26,href:"https://degreed.github.io/architecture/docs/help/how-to-contribute/",title:"How to Contribute",description:"Regularly update the installed npm packages to keep your Doks website stable, usable, and secure.",content:"\u003ch2 id=\"how-to-contribute-to-the-documentation\"\u003eHow to contribute to the documentation\u003c/h2\u003e\n\u003cp\u003eAt the bottom of each page you will find a \u0026ldquo;Edit this page on Github\u0026rdquo; button. You can either edit the file on Github and send a PR our way, or you can clone the repository and edit the markdown files in the \u003ccode\u003econtent\u003c/code\u003e directory.\u003c/p\u003e\n\u003cp\u003eIf you want to run it locally, you need to clone the repository and get the dependencies with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm install\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter which you can run it with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm run start\n\u003c/code\u003e\u003c/pre\u003e\n"},{id:27,href:"https://degreed.github.io/architecture/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:"\u003ch2 id=\"keyboard-shortcuts-for-search\"\u003eKeyboard shortcuts for search?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003efocus: \u003ccode\u003e/\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eselect: \u003ccode\u003e↓\u003c/code\u003e and \u003ccode\u003e↑\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eopen: \u003ccode\u003eEnter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eclose: \u003ccode\u003eEsc\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:28,href:"https://degreed.github.io/architecture/docs/legacy/",title:"Legacy",description:"",content:""},{id:29,href:"https://degreed.github.io/architecture/docs/events/",title:"Event-Driven Architecture",description:"",content:""},{id:30,href:"https://degreed.github.io/architecture/docs/principles/",title:"Principles",description:"",content:""},{id:31,href:"https://degreed.github.io/architecture/docs/applications/",title:"Applications",description:"",content:""},{id:32,href:"https://degreed.github.io/architecture/docs/domain/",title:"Domain APIs",description:"",content:""},{id:33,href:"https://degreed.github.io/architecture/docs/help/",title:"Help",description:"Help Doks.",content:""},{id:34,href:"https://degreed.github.io/architecture/docs/prologue/",title:"Prologue",description:"Your starting point for all things architecture",content:""},{id:35,href:"https://degreed.github.io/architecture/docs/",title:"Docs",description:"Docs Doks.",content:""},];index.add(docs);userinput.addEventListener('input',show_results,true);suggestions.addEventListener('click',accept_suggestion,true);function show_results(){var value=this.value;var results=index.search(value,5);var entry,childs=suggestions.childNodes;var i=0,len=results.length;suggestions.classList.remove('d-none');results.forEach(function(page){entry=document.createElement('div');entry.innerHTML='<a href><span></span><span></span></a>';a=entry.querySelector('a'),t=entry.querySelector('span:first-child'),d=entry.querySelector('span:nth-child(2)');a.href=page.href;t.textContent=page.title;d.textContent=page.description;suggestions.appendChild(entry);});while(childs.length>len){suggestions.removeChild(childs[i])}}
function accept_suggestion(){while(suggestions.lastChild){suggestions.removeChild(suggestions.lastChild);}
return false;}}());