<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Principles on</title><link>https://degreed.github.io/architecture/docs/principles/</link><description>Recent content in Principles on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Thu, 04 Feb 2021 12:13:57 +0100</lastBuildDate><atom:link href="https://degreed.github.io/architecture/docs/principles/index.xml" rel="self" type="application/rss+xml"/><item><title>Architecture Principles Introduction</title><link>https://degreed.github.io/architecture/docs/principles/introduction/</link><pubDate>Thu, 04 Feb 2021 12:10:00 +0100</pubDate><guid>https://degreed.github.io/architecture/docs/principles/introduction/</guid><description>Degreed is moving from a single application, to a system of systems. We want every system – aka service – to thrive in our eco-system. The “Architecture Principles” are guidelines to help you achieve that goal.
The principles are not written in stone, they change and adapt along with the needs of the business. Every principle consists of the following:
A declarative statement, for example: &amp;ldquo;smart nodes, dumb pipes: systems should be decoupled as much as possible and not centrally choreographed”.</description></item><item><title>System of Systems</title><link>https://degreed.github.io/architecture/docs/principles/system-of-systems/</link><pubDate>Thu, 04 Feb 2021 12:14:38 +0100</pubDate><guid>https://degreed.github.io/architecture/docs/principles/system-of-systems/</guid><description>Monolithic applications can be successful, but it has become common for organisations to feel frustrations with them as they grow in complexity and scope over time.
Change cycles are tied together – a change made to a small part of the application requires the entire monolith to be rebuilt, retested and deployed. Over time it is often hard to keep a good modular structure, making it challenging to keep changes that ought to affect only one module contained within that module.</description></item><item><title>Evolutionary Architecture</title><link>https://degreed.github.io/architecture/docs/principles/evolution/</link><pubDate>Thu, 04 Feb 2021 12:14:48 +0100</pubDate><guid>https://degreed.github.io/architecture/docs/principles/evolution/</guid><description>At this point in time we know less than we’ll know in six months. Our software should be able to evolve as we learn more about the business domain, the operational environment, and the technology itself. Change is a constant in the world around us, and its impact is increasingly unpredictable. However, by engineering our software for evolvability as a primary concern, we give ourselves the best chance of experimenting, learning and thriving in new conditions.</description></item><item><title>Database as a Service</title><link>https://degreed.github.io/architecture/docs/principles/database-as-a-service/</link><pubDate>Thu, 04 Feb 2021 12:15:09 +0100</pubDate><guid>https://degreed.github.io/architecture/docs/principles/database-as-a-service/</guid><description>This principle only applies to the new development of our Domain APIs, which will use the JSON:API framework. Below you can find our reasoning behind the decision and what the implications are.
Change Management Stored Procedures should be treated to the same standards as the rest of our application. It needs to be part of our Continuous Integration pipeline, where automated tests run against it. It has proven difficult to apply versioning and automated tests for them.</description></item><item><title>Smart Nodes Dumb Pipes</title><link>https://degreed.github.io/architecture/docs/principles/smart-nodes-dumb-pipes/</link><pubDate>Thu, 04 Feb 2021 12:15:09 +0100</pubDate><guid>https://degreed.github.io/architecture/docs/principles/smart-nodes-dumb-pipes/</guid><description>Composing larger systems around simpler and smaller systems also means needing to own their communication with other systems as well. To allow systems to evolve over time and keep up with the business’s desired pace of change, having them own their communication allows them to change quickly rather than negotiating a change to the pipes that connect them.
Implications Prefer open protocols, such as HTTP.
Services act like unix-filters, accepting requests, applying logic and returning a response.</description></item><item><title>Tools of the Trade</title><link>https://degreed.github.io/architecture/docs/principles/tools-of-the-trade/</link><pubDate>Thu, 04 Feb 2021 12:15:59 +0100</pubDate><guid>https://degreed.github.io/architecture/docs/principles/tools-of-the-trade/</guid><description>We must never become too busy sawing to take time to sharpen the saw.
Spend your time and use your FlexEd to improve yourself as a human and a developer. Reach out to your manager if there are tools you need to be more effective as a developer. Identify small annoyances in our development process. Thanks to the power of scale, reducing our build time by 10 seconds will add up to hours of time saved per week.</description></item><item><title>The Degreed Platform</title><link>https://degreed.github.io/architecture/docs/principles/the-degreed-platform/</link><pubDate>Thu, 04 Feb 2021 12:15:22 +0100</pubDate><guid>https://degreed.github.io/architecture/docs/principles/the-degreed-platform/</guid><description>Degreed is transitioning from a Software as a Service (Saas) to a Software as a Platform (SaaP) model for our business partners. As a company we want to deliver products to our (internal and external) customers which can be consumed by their own services.
Implications Platform products provide their functionality via (public) APIs; hence, the design of our APIs should be based on the API as a Product principle.</description></item></channel></rss>